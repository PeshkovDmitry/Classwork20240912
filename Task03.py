"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 2.
üìå –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª —Ä–∞–∑–¥–µ–ª—å–Ω–æ:
‚óã —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
‚óã –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è,
‚óã –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞),
‚óã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞,
‚óã —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

import logging
from datetime import date
from typing import Callable


def mylogger(func: Callable) -> Callable:

    def wrapper(*args, **kwargs):
        global logger
        res = func(*args, **kwargs)
        logger.info(f" –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {logger.level}")
        logger.info(f" –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date.today()}")
        logger.info(f" –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")
        logger.info(f" –ê–≥—Ä—É–º–µ–Ω—Ç—ã: {[arg for arg in args]}")
        logger.info(f" –†–µ–∑—É–ª—å—Ç–∞—Ç: {res}")
        return res

    return wrapper


@mylogger
def div(a: float, b: float):
    if not b == 0:
        return a / b
    else:
        return "–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è!"


logging.basicConfig(level=logging.NOTSET, filename="Task01.txt")
logger = logging.getLogger(__name__)
print(div(5, 2))