"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É 4.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å.
–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞,
–Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.
"""

import argparse
from datetime import date, datetime, timedelta, time
import locale

DAYS_OF_WEEK_NUM = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1, "–≤—Ç–æ—Ä–Ω–∏–∫": 2, "—Å—Ä–µ–¥–∞": 3, "—á–µ—Ç–≤–µ—Ä–≥": 4, "–ø—è—Ç–Ω–∏—Ü–∞": 5, "—Å—É–±–±–æ—Ç–∞": 6,
                    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 7}


def get_date(day: int, day_of_week: int, month: int) -> datetime:
    try:
        dt = get_first_day_of_month(month)
        dt = get_first_needed_day_of_week(dt, day_of_week)
        dt = get_needed_day_of_week(dt, day)
        return dt
    except Exception:
        print("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")


def get_first_day_of_month(month: int) -> datetime:
    year = datetime.now().year
    dt = datetime(year=year, month=month, day=1)
    return dt


def get_first_needed_day_of_week(dt: datetime, day_of_week: int) -> datetime:
    delta_t = timedelta(days=1)
    while not DAYS_OF_WEEK_NUM.get(dt.strftime("%A").lower()) == day_of_week:
        dt += delta_t
    return dt


def get_needed_day_of_week(dt: datetime, day: int) -> datetime:
    delta_t = timedelta(weeks=1)
    for _ in range(1, day):
        dt += delta_t
    return dt


locale.setlocale(locale.LC_ALL, ('ru_RU', 'UTF-8'))
parser = argparse.ArgumentParser(description='–ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏')
parser.add_argument('--day')
parser.add_argument('--day_of_week')
parser.add_argument('--month')
args = parser.parse_args()
if args.day is None:
    args.day = 1
if args.day_of_week is None:
    args.day_of_week = DAYS_OF_WEEK_NUM.get(datetime.now().strftime("%A").lower())
if args.month is None:
    args.month = datetime.now().month


print(args.day, args.day_of_week, args.month)
print(get_date(args.day, args.day_of_week, args.month))
